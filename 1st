DFS:
graph={
    '1':['3','7'],
    '3':['2','4'],
    '7':['9'],
    '2':[],
    '4':['9'],
    '9':[]
}
visited = set()
def dfs(visited, graph, node):
    if node not in visited:
        print(node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)
            
print("Following is the Depth First Search")
dfs(visited, graph, '1')
-------------------------------------------------------------------
BFS:
graph={
    '1':['3','7'],
    '3':['2','4'],
    '7':['9'],
    '2':[],
    '4':['9'],
    '9':[]
}
visited = []
queue = []
def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)
    
    while queue:
        m=queue.pop(0)
        print(m)
        
        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)
                
print("FOllowing is the Breadth First Search")
bfs(visited, graph, '1')
